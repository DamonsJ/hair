#version 400 core

layout(isolines) in;

in vec3 position_tc[];

const int MAX_VERTICES = 64; // Max number of hair vertices

// Constants for applying noise to vertex positions.
const int NOISE_OCTAVES = 3;
const float NOISE_AMPLITUDE = 0.0;

uniform mat4 model, view, projection;
uniform vec3 vertexData[MAX_VERTICES];
uniform int numHairSegments;
uniform float groupWidth;

float rand( vec2 p )
{
    float h = dot(p,vec2(127.1,311.7));
    return -1.0 + 2.0*fract(sin(h)*(43758.5453123));
}

float noise( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );
    vec2 u = f*f*(3.0-2.0*f);
    return mix( mix( rand( i + vec2(0.0,0.0) ),
                     rand( i + vec2(1.0,0.0) ), u.x),
                mix( rand( i + vec2(0.0,1.0) ),
                     rand( i + vec2(1.0,1.0) ), u.x), u.y);
}

float noiseWithOctaves( in vec2 p )
{
    float f = 0.0;
    for (int i = 0; i < NOISE_OCTAVES; i++) {
        float scale = pow(2.0, float(i));
        f += noise(5.0 * scale * gl_TessCoord.xy) / (2.0*scale);
    }
    return f;
}

vec3 evaluateSpline()
{
    // 0 -------- 1 -----X-- 2 -------- 3
    //              <--->
    //                t

    float f = gl_TessCoord.x * numHairSegments;

    float t = fract(f);

    int index1 = int(f);
    int index0 = max(index1 - 1, 0);
    int index2 = min(index1 + 1, numHairSegments);
    int index3 = min(index2 + 1, numHairSegments);

    vec3 p0 = vertexData[index0];
    vec3 p1 = vertexData[index1];
    vec3 p2 = vertexData[index2];
    vec3 p3 = vertexData[index3];

    vec3 m1 = (p2 - p0) / 2.0;
    vec3 m2 = (p1 - p3) / 2.0;

    return mix(p1 + m1 * t, p2 + m2 * (1-t), t);
}

void main()
{
    vec3 pos = evaluateSpline();

    pos.x += groupWidth * (gl_TessCoord.y - 0.5); // Offset each hair.
    pos.x += NOISE_AMPLITUDE * noiseWithOctaves(gl_TessCoord.xy); // Apply noise to offset position.

    gl_Position = projection * view * model * vec4(pos, 1);
}
